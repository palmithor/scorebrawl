// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum LeagueMemberRole {
  viewer
  member
  editor
  owner
}

model SeasonPlayer {
  id             String        @id @default(cuid())
  leaguePlayerId String
  leaguePlayer   LeaguePlayer  @relation(fields: [leaguePlayerId], references: [id], onDelete: Cascade)
  disabled       Boolean       @default(false)
  matches        MatchPlayer[]
  seasonId       String
  season         Season        @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  elo            Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([leaguePlayerId, seasonId], name: "seasonPlayer")
}

model LeagueMember {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  leagueId  String
  league    League           @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  role      LeagueMemberRole

  @@unique([userId, leagueId], name: "leagueMember")
}

model LeaguePlayer {
  id           String         @id @default(cuid())
  userId       String
  leagueId     String
  league       League         @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  disabled     Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  SeasonPlayer SeasonPlayer[]

  @@unique([userId, leagueId], name: "seasonPlayer")
}

model League {
  id         String         @id @default(cuid())
  logoUrl    String?
  name       String
  nameSlug   String
  initialElo Int
  code       String         @default(cuid())
  archived   Boolean        @default(false)
  isPrivate  Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  createdBy  String
  updatedBy  String
  members    LeagueMember[]
  players    LeaguePlayer[]
  seasons    Season[]

  @@unique([code], name: "leagueCode")
  @@unique([nameSlug], name: "leagueNameSlug")
}

model Season {
  id        String         @id @default(cuid())
  name      String
  startedAt DateTime       @default(now())
  endsAt    DateTime?
  leagueId  String
  league    League         @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  players   SeasonPlayer[]
  matches   Match[]
  createdBy String
  updatedBy String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model MatchPlayer {
  id             String       @id @default(cuid())
  leaguePlayer   SeasonPlayer @relation(fields: [leaguePlayerId], references: [id], onDelete: Cascade)
  leaguePlayerId String
  elo            Int
  homeTeam       Boolean
  matchId        String
  match          Match        @relation(fields: [matchId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Match {
  id              String        @id @default(cuid())
  players         MatchPlayer[]
  season          Season        @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId        String
  homeScore       Int
  awayScore       Int
  homeExpectedElo Float
  awayExpectedElo Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       String
}
